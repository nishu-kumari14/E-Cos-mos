name: 🚀 Cosmos CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: 🧪 Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📦 Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔧 Make Maven wrapper executable
      run: chmod +x ./mvnw
      
    - name: 🏗️ Build with Maven
      run: ./mvnw clean compile
      
    - name: 🧪 Run tests
      run: ./mvnw test
      
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 📈 Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        
    - name: 📦 Package application
      run: ./mvnw package -DskipTests
      
    - name: 📈 Upload coverage reports
      if: success()
      run: |
        echo "Coverage reports would be uploaded here"
        # Add your coverage tool integration here
        
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run security scan
      run: |
        echo "Security scanning would be performed here"
        # Add security scanning tools like OWASP dependency check
        
  build-docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Build Docker image
      run: |
        echo "Docker image build would happen here"
        # docker build -t cosmos-ecommerce:${{ github.sha }} .
        
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: 📧 Send notification
      run: |
        echo "Build completed with status: ${{ needs.test.result }}"
        echo "Security scan completed with status: ${{ needs.security-scan.result }}"
